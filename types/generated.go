package types

// Code generated by mkenum. DO NOT EDIT.

// Legal values of the TweetFields enumeration.
const (
	// TweetFields is the label for optional Tweet field parameters.
	TweetFields = "tweet.fields"

	Tweet_Attachments        = "attachments"
	Tweet_AuthorID           = "author_id"
	Tweet_ContextAnnotations = "context_annotations"
	Tweet_ConversationID     = "conversation_id"
	Tweet_CreatedAt          = "created_at"
	Tweet_Entities           = "entities"
	Tweet_Location           = "geo"
	Tweet_InReplyTo          = "in_reply_to_user_id"
	Tweet_Language           = "lang"
	Tweet_Sensitive          = "possibly_sensitive"
	Tweet_Referenced         = "referenced_tweets"
	Tweet_Source             = "source"
	Tweet_Withheld           = "withheld"
)

// Tweets is a searchable slice of Tweet values.
type Tweets []*Tweet

// FindByID returns the first Tweet in ts whose ID matches, or nil.
func (ts Tweets) FindByID(id string) *Tweet {
	for _, v := range ts {
		if v.ID == id {
			return v
		}
	}
	return nil
}

// Legal values of the UserFields enumeration.
const (
	// UserFields is the label for optional User field parameters.
	UserFields = "user.fields"

	User_CreatedAt       = "created_at"
	User_Description     = "description"
	User_Entities        = "entities"
	User_FuzzyLocation   = "location"
	User_PinnedTweetID   = "pinned_tweet_id"
	User_ProfileImageURL = "profile_image_url"
	User_Protected       = "protected"
	User_PublicMetrics   = "public_metrics"
	User_ProfileURL      = "url"
	User_Verified        = "verified"
	User_Withheld        = "withheld"
)

// Users is a searchable slice of User values.
type Users []*User

// FindByID returns the first User in us whose ID matches, or nil.
func (us Users) FindByID(id string) *User {
	for _, v := range us {
		if v.ID == id {
			return v
		}
	}
	return nil
}

// Legal values of the MediaFields enumeration.
const (
	// MediaFields is the label for optional Media field parameters.
	MediaFields = "media.fields"

	Media_Attachments     = "attachments"
	Media_Duration        = "duration_ms"
	Media_Height          = "height"
	Media_PreviewImageURL = "preview_image_url"
	Media_Width           = "width"
)

// Medias is a searchable slice of Media values.
type Medias []*Media

// FindByKey returns the first Media in ms whose Key matches, or nil.
func (ms Medias) FindByKey(key string) *Media {
	for _, v := range ms {
		if v.Key == key {
			return v
		}
	}
	return nil
}

// Legal values of the PollFields enumeration.
const (
	// PollFields is the label for optional Poll field parameters.
	PollFields = "poll.fields"

	Poll_Attachments  = "attachments"
	Poll_Duration     = "duration_minutes"
	Poll_EndTime      = "end_datetime"
	Poll_VotingStatus = "voting_status"
)

// Polls is a searchable slice of Poll values.
type Polls []*Poll

// FindByID returns the first Poll in ps whose ID matches, or nil.
func (ps Polls) FindByID(id string) *Poll {
	for _, v := range ps {
		if v.ID == id {
			return v
		}
	}
	return nil
}

// Legal values of the PlaceFields enumeration.
const (
	// PlaceFields is the label for optional Place field parameters.
	PlaceFields = "place.fields"

	Place_Attachments = "attachments"
	Place_ContainedIn = "contained_within"
	Place_CountryName = "country"
	Place_CountryCode = "country_code"
	Place_Location    = "geo"
	Place_Name        = "name"
	Place_Type        = "place_type"
)

// Places is a searchable slice of Place values.
type Places []*Place

// FindByID returns the first Place in ps whose ID matches, or nil.
func (ps Places) FindByID(id string) *Place {
	for _, v := range ps {
		if v.ID == id {
			return v
		}
	}
	return nil
}
